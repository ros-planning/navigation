#!/usr/bin/env python
# DWA Planner configuration

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, double_t, int_t, bool_t
from local_planner_limits import add_generic_localplanner_params

gen = ParameterGenerator()

# This unusual line allows to reuse existing parameter definitions
# that concern all localplanners
add_generic_localplanner_params(gen)

gen.add("sim_time", double_t, 0, "The amount of time to roll trajectories out for in seconds", 1.7, 0)
gen.add("sim_period", double_t, 0, "Period in which acceleration is allowed. 1 / sim_period should be smaller than the controller frequency.", 0.2, 0)
gen.add("sim_granularity", double_t, 0, "The granularity with which to check for collisions along each trajectory in meters", 0.025, 0)
gen.add("angular_sim_granularity", double_t, 0, "The granularity with which to check for collisions for rotations in radians", 0.1, 0)

gen.add("scaling_speed", double_t, 0, "The absolute value of the velocity at which to start scaling the robot's footprint, in m/s", 1.0, 0)
gen.add("max_scaling_factor", double_t, 0, "The maximum factor to scale the robot's footprint by", 0, 0)

gen.add("vx_samples", int_t, 0, "The number of samples to use when exploring the x velocity space", 3, 1)
gen.add("vy_samples", int_t, 0, "The number of samples to use when exploring the y velocity space", 10, 1)
gen.add("vth_samples", int_t, 0, "The number of samples to use when exploring the theta velocity space", 20, 1)

gen.add("use_dwa", bool_t, 0, "Use dynamic window approach to constrain sampling velocities to small window.", True)

# Switching behavior
gen.add("switch_goal_distance", double_t, 0, "If the distance to the global goal is smaller, different parameters are selected", 0.5, 0.0, 2.0)
gen.add("switch_plan_distance", double_t, 0, "If the distance to the plan is larger, different parameters are selected", 0.5, 0.0, 2.0)
gen.add("switch_yaw_error", double_t, 0, "If the yaw error of the robot w.r.t. the plan is larger, different parameters are selected", 1.6, 0.0, 3.14)

# Cost functions
gen.add("align_align_scale", double_t, 0, "Align state - align_scale", 1.0, 0)
gen.add("align_plan_scale", double_t, 0, "Align state - plan_scale", 1.0, 0)
gen.add("align_goal_scale", double_t, 0, "Align state - goal_scale", 0.0, 0)
gen.add("align_cmd_scale", double_t, 0, "Align state - cmd vel scale", 0.0, 0)
gen.add("align_obstacle_scale", double_t, 0, "Align state - obstacle scale", 0.0, 0)

gen.add("default_align_scale", double_t, 0, "Default state - align_scale", 1.0, 0)
gen.add("default_plan_scale", double_t, 0, "Default state - plan_scale", 1.0, 0)
gen.add("default_goal_scale", double_t, 0, "Default state - goal_scale", 1.0, 0)
gen.add("default_cmd_scale", double_t, 0, "Default state - cmd vel scale", 0.0, 0)
gen.add("default_obstacle_scale", double_t, 0, "Default state - obstacle scale", 0.0, 0)

gen.add("arrive_align_scale", double_t, 0, "Arrive state - align_scale", 1.0, 0)
gen.add("arrive_plan_scale", double_t, 0, "Arrive state - plan_scale", 0.0, 0)
gen.add("arrive_goal_scale", double_t, 0, "Arrive state - goal_scale", 1.0, 0)
gen.add("arrive_cmd_scale", double_t, 0, "Arrive state - cmd vel scale", 0.0, 0)
gen.add("arrive_obstacle_scale", double_t, 0, "Arrive state - obstacle scale", 0.0, 0)

gen.add("align_cmd_px", double_t, 0, "Align state - penalize positive velocity in x-direction", 0.0, 0)
gen.add("align_cmd_nx", double_t, 0, "Align state - penalize negative velocity in x-direction", 0.0, 0)
gen.add("align_cmd_py", double_t, 0, "Align state - penalize positive velocity in y-direction", 0.0, 0)
gen.add("align_cmd_ny", double_t, 0, "Align state - penalize negative velocity in y-direction", 0.0, 0)
gen.add("align_cmd_pth", double_t, 0, "Align state - penalize positive velocity in th-direction", 0.0, 0)
gen.add("align_cmd_nth", double_t, 0, "Align state - penalize negative velocity in th-direction", 0.0, 0)

gen.add("default_cmd_px", double_t, 0, "Default state - penalize positive velocity in x-direction", 0.0, 0)
gen.add("default_cmd_nx", double_t, 0, "Default state - penalize negative velocity in x-direction", 0.0, 0)
gen.add("default_cmd_py", double_t, 0, "Default state - penalize positive velocity in y-direction", 0.0, 0)
gen.add("default_cmd_ny", double_t, 0, "Default state - penalize negative velocity in y-direction", 0.0, 0)
gen.add("default_cmd_pth", double_t, 0, "Default state - penalize positive velocity in th-direction", 0.0, 0)
gen.add("default_cmd_nth", double_t, 0, "Default state - penalize negative velocity in th-direction", 0.0, 0)

gen.add("arrive_cmd_px", double_t, 0, "Arrive state - penalize positive velocity in x-direction", 0.0, 0)
gen.add("arrive_cmd_nx", double_t, 0, "Arrive state - penalize negative velocity in x-direction", 0.0, 0)
gen.add("arrive_cmd_py", double_t, 0, "Arrive state - penalize positive velocity in y-direction", 0.0, 0)
gen.add("arrive_cmd_ny", double_t, 0, "Arrive state - penalize negative velocity in y-direction", 0.0, 0)
gen.add("arrive_cmd_pth", double_t, 0, "Arrive state - penalize positive velocity in th-direction", 0.0, 0)
gen.add("arrive_cmd_nth", double_t, 0, "Arrive state - penalize negative velocity in th-direction", 0.0, 0)

gen.add("restore_defaults", bool_t, 0, "Restore to the original configuration.", False)

exit(gen.generate("dwa_local_planner", "dwa_local_planner", "DWAPlanner"))
